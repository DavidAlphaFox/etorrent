----------------------------------------------------------------------
-- This is a list of what To Do before a release is ready to be made.
----------------------------------------------------------------------

* Torrent_Peer
- Send interest-messages to the peer_master.
- Handle when a piece has errors
  When a piece has errors, we must handle it gracefully.

* Peer Master
- Gather upload and download
- Gather interest.
- Implement rounds
  Implement choking/unchoking rounds in the Peer Master.
- Implement a simpler bad map
  Rather than keep the kill-message (Which is always normal), keep a
   counter and make the counter be used.
- Handle Endgame

* TorrentControl
- Consider: Simplifying state machine.
  The state machine can be simplified a great deal if you are smart
   and inject most torrent information via the start_link message.

* Connection management

* General stuff
- Implement Endgame
  Endgame requires global control of all peers. It should be
   implemented, but first when the rest of the system begins to work.

- Implement seeding
  We are not doing anything specific to take care of seeding right
  now. This must obviously be cared for. The way to do it is in the
  torrent_state process.

- Implement support for listening connections
  This will make the system not behave as if it were always behind a
  NAT.

- Add license facts,
  BSD-license. We need a spread of Erlang code!

- Add author facts
  They are there, but are incorrect in a lot of files. They must
  be corrected.

* TESTS!
- Seeder-test
  ** Azureus
  ** Original Bittorrent
  ** Bittornado
  ** rtorrent
  ** ctorrent
- Ensure that uploaded/downloaded/left reports to tracker is correct!

* DOCUMENTATION!
- Pick functions at random, and document what they are doing.
  It is /especially/ important to document library calls and
   non-standard internal functions in OTP modules.
- Make an INSTALL and README document for release.
- Build a google-code page for the release.
- Push release 1.0 into SVN at google.

------------------------------------------------------------
VERSION ++ (Not decided yet)
------------------------------------------------------------
* TorrentManager
- Check if a torrent is duplicate.
  We must check if a given torrent file which has just been added is a
  duplicate of a torrent we already manage. If this is the case, then we
  should just ignore it.

* Cleanups
- Decide what to do if we connect multiply to the same IP

* PeerIds
- Is one billion peerids enough? Think about making the number higher
  If the client becomes popular, this is important to change. We can
   /easily/ increase the number to a more correct level.

* ROBUSTNESS
- What happens if process X dies
  Go through all processes, and think about what happens if it
   dies. Ensure that the system is robust.

* Fast resume
  Use a dets table to get fast resume support.

* Implement the fast extension.
  This will require some thought as there may be a very changed
   implementation in the peer clients.
