%%% Local Variables:
%%% mode: todoo
%%% End:
----------------------------------------------------------------------
-- This is a list of what To Do before a release is ready to be made.
--   Keep the style please. Can be read with emacs org-mode
----------------------------------------------------------------------

* Review endgame support. Something is murky in there.
   The torrents won't complete and sits in the endgame forever. That
   is pretty bad, so we will need to figure out why that happens and
   add a fix to the code.

   Also, endgame support is currently totally broken. We should rework
   the endgame support entirely.

- Alter t_peer_recv's to understand endgame.

* Use passive sockets [Milestone: 1.1]
   We need to use passive sockets at some point. The reason is that
   active sockets have no flow control, and the granularity of whole
   packets are bad from a choke/unchoke perspective. The code that
   needs change is rather contained, luckily, and can be placed in
   peer_communication.

   An even more sinister idea: change to active sockets when the rate
   of the peer exceeds a certain set amount to cut down the amount of
   processing needed. We *do* have some flow control as a peer will
   only send things we requested, so a peer can't overflow us by more
   than that anyway.

* DOCUMENTATION!
- Pick functions at random, and document what they are doing.
  It is /especially/ important to document library calls and
   non-standard internal functions in OTP modules.

* TorrentPeerMaster [Milestone: not decided]
- Figure out a better choking/unchoking algorithm.
  The current algorithm is the original one. We should look for a
   better algorithm and implement that. Suggestions for digging:
     ** Azureus
     ** Mainline
     ** Bittornado
     ** rtorrent

* Cleanups
- Decide what to do if we connect multiply to the same IP

* Temporary IP-ban on errors [Milestone: 1.1]
  If we find an error on a given peer, ban him temporarily for some
   time.

* ROBUSTNESS [Milestone: 1.2]
- In general, robustness is not really taken care of. We ought to make
  the system more robust by not relying so much on Pids etc.
- What happens if process X dies
  Go through all processes, and think about what happens if it
   dies. Ensure that the system is robust.


