%%% Local Variables:
%%% mode: todoo
%%% End:
----------------------------------------------------------------------
-- This is a list of what To Do before a release is ready to be made.
--   Keep the style please. Can be read with emacs org-mode
----------------------------------------------------------------------

* Get etorrent_t_peer_group to use the mnesia state for seeding
   Right now, t_peer_group uses it's own knowledge of seeding. This is
   bad and it should use the #torrent state for checking the
   condition. Easily fixed, and then we seed correctly (I hope).

* Eradicate XXX and TODO [Milestone 0.8]
   Go through the code and remove all XXX and TODOs remaining
   there. There is a few that have been added when I find something
   disgusting in the code base.

* When peers die, putback it's assigned chunks [Milestone: 0.8]
   Currently this does not happen properly. It should be handled by
   the peer group process.

* Test endgame [Milestone 0.8]
   The endgame has not been tested much. Do some more testing.

* Add another state for #piece records [Milestone: 0.9]
   The state 'chunked_no_left' should indicate that the piece has been
   chunked, but there are no chunks left to pick from it. The state is
   introduced when we empty the #chunk record with not_fetched for the
   #piece and it is reintroduced in putback_chunks so we may again
   pick from it. Also, in the endgame, we should pick off from this
   state.

   It turns out to be an optimization, so put it into 0.9 for now.

* Let the system start with +Ktrue and +A 256 [Milestone: 0.9]
   Will greatly enhance the performance of the application.

* Use passive sockets [Milestone: 1.1]
   We need to use passive sockets at some point. The reason is that
   active sockets have no flow control, and the granularity of whole
   packets are bad from a choke/unchoke perspective. The code that
   needs change is rather contained, luckily, and can be placed in
   peer_communication.

   An even more sinister idea: change to active sockets when the rate
   of the peer exceeds a certain set amount to cut down the amount of
   processing needed. We *do* have some flow control as a peer will
   only send things we requested, so a peer can't overflow us by more
   than that anyway.

* DOCUMENTATION!
- Pick functions at random, and document what they are doing.
  It is /especially/ important to document library calls and
   non-standard internal functions in OTP modules.

* TorrentPeerMaster [Milestone: not decided]
- Figure out a better choking/unchoking algorithm.
  The current algorithm is the original one. We should look for a
   better algorithm and implement that. Suggestions for digging:
     ** Azureus
     ** Mainline
     ** Bittornado
     ** rtorrent

* Cleanups
- Decide what to do if we connect multiply to the same IP

* Temporary IP-ban on errors [Milestone: 1.1]
  If we find an error on a given peer, ban him temporarily for some
   time.

* ROBUSTNESS [Milestone: 1.2]
- In general, robustness is not really taken care of. We ought to make
  the system more robust by not relying so much on Pids etc.
- What happens if process X dies
  Go through all processes, and think about what happens if it
   dies. Ensure that the system is robust.


