%%% Local Variables:
%%% mode: org
%%% End:
----------------------------------------------------------------------
-- This is a list of what To Do before a release is ready to be made.
--   Keep the style please. Can be read with emacs org-mode
----------------------------------------------------------------------

* Revamp etorrent_t_manager.

* Go to Mnesia
  We are currently using ets tables directly. It would suit us a great deal to
  begin utilizing the mnesia system to provide database functionality
  to us. This is the recommended way and is probably better
  supported. It will also remove some pesky problems along the way I
  am sure. We can slowly migrate ets tables to mnesia tables as we
  need it done.
** Delete etorrent_t_mapper
  When we have a complete mnesia-implementation, then the
  implementation of the etorrent_t_mapper is not needed
  anymore. Mnesia can run that itself instead. So we just connect
  directly to the mnesia core and let it do the things.
* Move the piece-chunking code up from the peer connections.
  It should not be the case that the individual peer connection
  processes are responsible for managing the chunking of pieces. It
  should be handled in the process overseeing all peer connections. We
  will need some pretty tough changes to make this work correctly.

* DOCUMENTATION!
- Pick functions at random, and document what they are doing.
  It is /especially/ important to document library calls and
   non-standard internal functions in OTP modules.

------------------------------------------------------------
VERSION ++ (Not decided yet)
------------------------------------------------------------
* Use Edoc
- This takes time, so pick a single module at a time and correct it

* TorrentPeerMaster
- Figure out a better choking/unchoking algorithm.
  The current algorithm is the original one. We should look for a
   better algorithm and implement that. Suggestions for digging:
     ** Azureus
     ** Mainline
     ** Bittornado
     ** rtorrent

* Cleanups
- Decide what to do if we connect multiply to the same IP

* Temporary IP-ban on errors
  If we find an error on a given peer, ban him temporarily for some
   time.

* ROBUSTNESS
- What happens if process X dies
  Go through all processes, and think about what happens if it
   dies. Ensure that the system is robust.
