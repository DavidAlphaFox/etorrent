%%% Local Variables:
%%% mode: org
%%% End:
----------------------------------------------------------------------
-- This is a list of what To Do before a release is ready to be made.
--   Keep the style please. Can be read with emacs org-mode
----------------------------------------------------------------------

* Optimize the mnesia code.
  Currently, the mnesia code is crap. It can be optimized quite a lot
  and it will probably make the code run a lot faster than now. It has
  the wrong kind of DB-schema and performs as pure shit. There are no
  indexes and too much crap is placed inside expensive transactions.

  We must find the functions that can go outside transactions and then
  place it outside.
** Step 1: Rework the 'torrent' table.
   It seems utter wrong to use the infohash as the id, when the rest
   of the code uses the Pid. Consider make Pid the primary key of the
   table or use something else as the unique identifier.

   Should it be the Pid or something else? Something else means that
   we don't rely on a Pid that can die unexpectedly, so this is
   probably better. The id can be stored in the tracking map along
   with the infohash (which I don't think we use for anything else).
* We seem to be passing around a master_pid we are not using anymore.
  Consider killing this master pid!

* We are currently ignoring the endgame. This can be fixed easily though.
  The endgame is not handled at all. We do check for the endgame
  however. We should then alter the piece picking strategy a
  bit. We just pick out all eligible chunks for a peer first and then
  pick the required number of chunks randomly.

* Use highwatermark/lowwatermark for queued pieces.
  Rather than queue new pieces one at a time, we could just queue on
  some watermarks. This lowers the amount of code traversed a great
  deal. Also: it paves the way for maintaining queue length as a
  bandwidth*delay product like construction.

* Only count downloaded bytes when we _know_ the bytes are from the torrent in question


* DOCUMENTATION!
- Pick functions at random, and document what they are doing.
  It is /especially/ important to document library calls and
   non-standard internal functions in OTP modules.

------------------------------------------------------------
VERSION ++ (Not decided yet)
------------------------------------------------------------

* TorrentPeerMaster
- Figure out a better choking/unchoking algorithm.
  The current algorithm is the original one. We should look for a
   better algorithm and implement that. Suggestions for digging:
     ** Azureus
     ** Mainline
     ** Bittornado
     ** rtorrent


* Cleanups
- Decide what to do if we connect multiply to the same IP


* Temporary IP-ban on errors
  If we find an error on a given peer, ban him temporarily for some
   time.


* ROBUSTNESS
- In general, robustness is not really taken care of. We ought to make
  the system more robust by not relying so much on Pids etc.
- What happens if process X dies
  Go through all processes, and think about what happens if it
   dies. Ensure that the system is robust.


