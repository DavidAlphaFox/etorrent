%%% Local Variables:
%%% mode: todoo
%%% End:
----------------------------------------------------------------------
-- This is a list of what To Do before a release is ready to be made.
--   Keep the style please. Can be read with emacs org-mode
----------------------------------------------------------------------

* Go through the etorrent_chunk code.
   There are many improvements possible to this code. Both in the
   speed deparment, but also in the readability department. Consider
   an alternative way of coding it.
- No passing of PeerMaster and FSPid
   We could handle the work directly in the peer calling. Seems like
   a better placing of concerns. And while here, move store_piece to
   the piece code.

* Review endgame support. Something is murky in there.
   The torrents won't complete and sits in the endgame forever. That
   is pretty bad, so we will need to figure out why that happens and
   add a fix to the code.

   Also, endgame support is currently totally broken. We should rework
   the endgame support entirely.

* We seem to be passing around a master_pid we are not using anymore.
  Consider killing this master pid! It seems to passed around in some
  places. It should also be called PeerGroupPid where needed.

* Use highwatermark/lowwatermark for queued pieces.
  Rather than queue new pieces one at a time, we could just queue on
  some watermarks. This lowers the amount of code traversed a great
  deal. Also: it paves the way for maintaining queue length as a
  bandwidth*delay product like construction.

* DOCUMENTATION!
- Pick functions at random, and document what they are doing.
  It is /especially/ important to document library calls and
   non-standard internal functions in OTP modules.

* TorrentPeerMaster
- Figure out a better choking/unchoking algorithm.
  The current algorithm is the original one. We should look for a
   better algorithm and implement that. Suggestions for digging:
     ** Azureus
     ** Mainline
     ** Bittornado
     ** rtorrent

* Cleanups
- Decide what to do if we connect multiply to the same IP

* Temporary IP-ban on errors
  If we find an error on a given peer, ban him temporarily for some
   time.

* ROBUSTNESS
- In general, robustness is not really taken care of. We ought to make
  the system more robust by not relying so much on Pids etc.
- What happens if process X dies
  Go through all processes, and think about what happens if it
   dies. Ensure that the system is robust.


