MANTRA: Handle most of the stuff in the torrent_peer code before
moving on to other parts. What is made here dictates the layout of the
rest of the code.

MANTRA: ets tables have processes before them to manage them easily.

UNDECIDED: Merge filesystem and piecemap into the same erlang process?

* Split out torrent_peer_send into its own thread.
Doing this will greatly simplify code to a simpler format so we are
keeping ourselves below the 400 lines of code per module limit.

* Set torrent_id in torrent_peer
We have added torrent_id to the torrent peer code. But we have not
given it any value yet.

* Implement sending and retrieval of piece maps
The first thing one does in a torrent is to retrieve piece bit-arrays
and send bit-arrays so both parties know how much they have and what
they should request. This needs to be implemented first, before we try
to implement other stuff, as it is clear it is needed for many
operations in the system.
** (DONE) Implement code for building piecemaps from bitfields
** (DONE) Implement code for building bitfields from piecemaps
** Hook the 2 previous into the main framework.
Please note that a node may refrain from sending a map if he has 0
pieces at the moment.

* Fix connection_manager
We need to fix the state code for the connection manager. It has some
state tables that obviously needs to be managed. But it has to be
simplified a lot. And it really can. Mapping of pids to torrents and
peerids should be handled by a separate process which only has this as
the primary goal.

* Reduce the number of ets tables
Fix and reduce the number of ets tables to a constant amount. This
will allow us to scale into post-1000 concurrent torrents.

* Choke/Unchoke management
We need to manage choke and unchoke

* Filesystem management
We need FS management

* Local requests at other end.
...

* Add license facts

* Add author facts

* Kill -compile(export_all) and use -export.

